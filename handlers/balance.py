import asyncio

import decouple
from aiogram import Dispatcher, types
from keyboards import inline
from database import users, balance, nft, binance_db


async def balance_handler(call: types.CallbackQuery):
    language = await users.user_data(call.from_user.id)
    user_balance = await balance.get_balance(call.from_user.id)
    photo = decouple.config("BANNER_BALANCE")
    dao = await nft.nft_id(call.from_user.id)
    binance_balance = await binance_db.get_binance_ac(call.from_user.id)
    text = f"–í–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ DAO, –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: {dao}" \
           f"\n\nüíµ <em>–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç</em>" \
           f"\n<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {round(user_balance[0], 2)} USDT" \
           f"\n<b>–ê–∫—Ç–∏–≤–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:</b> {round(user_balance[1], 2)} USDT"
    text += f"\n\nüí∞ <em>–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç</em>" \
            f"\n<b>–ë–∞–ª–∞–Ω—Å Binance API:</b> {round(binance_balance[0], 2)}" \
            f"\n<b>–ë–∞–ª–∞–Ω—Å J2M:</b> {round(binance_balance[1], 2)}" \
            f"\n<b>–ê–∫—Ç–∏–≤–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:</b> {round(binance_balance[2], 2)}" if binance_balance is not None else ""
    text += f"\n\n<b>üë®‚Äçüë¶‚Äçüë¶ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</b> {round(user_balance[3], 2)} USDT"
    text += f"\n\n<b>–°—É–º–º–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –≤—ã–≤–æ–¥:</b> {round(user_balance[2], 2)} " \
            f"USDT" if int(user_balance[2]) > 0 else ""
    text += "\n\n<a href='https://telegra.ph/Grafik-raboty-bota-vysokochastotnoj-torgovli-07-13'>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã " \
            "—Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞</a>"

    if language[4] == "EN":
        text = f"Your individual DAO participant number recorded in the smart contract: {dao}" \
               f"\n\nüíµ <em>Collective Account</em>" \
               f"\n<b>Your balance:</b> {round(user_balance[0], 2)} USDT" \
               f"\n<b>Active deposit:</b> {round(user_balance[1], 2)} USDT"
        text += f"\n\nüí∞ <em>Personal Account</em>" \
                f"\n<b>Binance API balance:</b> {round(binance_balance[0], 2)}" \
                f"\n<b>J2M balance:</b> {round(binance_balance[1], 2)}" \
                f"\n<b>Active deposit:</b> {round(binance_balance[2], 2)}" if binance_balance is not None else ""
        text += f"\n\n<b>üë®‚Äçüë¶‚Äçüë¶ Partner earnings:</b> {round(user_balance[3], 2)} USDT"
        text += f"\n\n<b>Amount reserved for withdrawal:</b> {round(user_balance[2], 2)} USDT" if int(
            user_balance[2]) > 0 else ""
        text += "\n\n<a href='https://telegra.ph/Grafik-raboty-bota-vysokochastotnoj-torgovli-07-13'>" \
                "Trading bot work schedule (RU)</a>"

        photo = decouple.config("BANNER_BALANCE_EN")
    await call.message.delete()
    try:
        if user_balance[4]:
            text_x = f"–û–∂–∏–¥–∞–π—Ç–µ, –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –≤–∞—à –∫–æ—à–µ–ª–µ–∫..."
            text_x2 = f"–í–∞—à –∫–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n" \
                      f"<b>–í–∞–∂–Ω–æ! –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≤ –∑–∞–º–µ—Ç–∫–∏.</b>\n" \
                      f"–í–∞—à –∫–ª—é—á, –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: <b>{user_balance[3]}</b>" \
                      f"\n\n<em>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.</em>"
            if language[4] == "EN":
                text_x = f"Expect the bot to create your wallet..."
                text_x2 = f"Your wallet has been successfully created!\n\n" \
                          f"<b>Important! Please save this message as a screenshot or write it down in your notes.</b>\n" \
                          f"Your key for contacting support: <b>{user_balance[3]}</b>" \
                          f"\n\n<em>It is recommended to delete this message after saving your secret key.</em>"
            message = await call.message.answer(text_x)
            await call.bot.send_chat_action(call.message.chat.id, "typing")
            await asyncio.sleep(3)

            await call.bot.delete_message(chat_id=call.message.chat.id,
                                          message_id=message.message_id)
            await call.message.answer(text_x2)
            await call.bot.send_chat_action(call.message.chat.id, "upload_photo")
            await asyncio.sleep(2)
    except IndexError:
        pass
    await call.message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=inline.balance_history(language[4]))


async def withdrawal_refill_history(call: types.CallbackQuery):
    language = await users.user_data(call.from_user.id)
    await call.message.delete()
    history_type = 'OUT' if call.data == 'withdrawal_history' else 'IN'
    if call.data == 'withdrawal_history':
        history_text = '–≤—ã–≤–æ–¥–∞'
        if language[4] == "EN":
            history_text = 'withdrawal'
    else:
        history_text = '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è'
        if language[4] == 'EN':
            history_text = 'refill'
    all_user_data = await balance.get_balance_history(call.from_user.id, history_type)
    for user_data in all_user_data:
        text = f"<b>–î–∞—Ç–∞:</b> {user_data[0].strftime('%d.%m.%Y %H:%M:%S')}\n<b>C—É–º–º–∞:</b> {user_data[1]}" \
               f"\n<b>–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {user_data[2]}"
        if language[4] == "EN":
            hash_ = user_data[2]
            hash_ = 'Personal Account' if hash_ == '–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç' else hash_
            text = f"<b>Date:</b> {user_data[0].strftime('%d.%m.%Y %H:%M:%S')}\n<b>Amount:</b> {user_data[1]}" \
                   f"\n<b>Transaction Hash:</b> {hash_}"
        await call.message.answer(text)
    if not all_user_data:
        text = f'–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ {history_text}!'
        if language[4] == "EN":
            text = f'You have no {history_text} history!'
        await call.message.answer(text, reply_markup=inline.back_button(language[4]))
    else:
        text = f'–í—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω!'
        if language[4] == "EN":
            text = f'History output completed!'
        await call.message.answer(f"{text}", reply_markup=inline.back_button(language[4]))


def register(dp: Dispatcher):
    dp.register_callback_query_handler(balance_handler, text='balance')
    dp.register_callback_query_handler(withdrawal_refill_history,
                                       lambda c: c.data in ['withdrawal_history', 'refill_history'])

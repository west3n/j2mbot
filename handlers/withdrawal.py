import asyncio
import datetime
import decouple
import handlers.commands

from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageIdentifierNotSpecified
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from handlers import commands, google
from keyboards import inline
from database import users, balance, output, binance_db


class NewWallet(StatesGroup):
    wallet = State()
    amount = State()
    email = State()


class ChangeWallet(StatesGroup):
    email = State()
    wallet = State()


class ChangePercentage(StatesGroup):
    percentage = State()


async def withdraw_main_menu(call: types.CallbackQuery):
    await call.message.delete()
    photo = decouple.config("BANNER_WITHDRAWAL")
    current_date = datetime.datetime.now()
    week_number = (current_date.day - 1) // 7 + 1
    is_even_week = week_number % 2 == 0
    amount, out = await balance.get_amount(call.from_user.id)
    balance_ = await balance.get_balance(call.from_user.id)
    body = amount - out
    print(body)
    income = (balance_[0] + balance_[1]) - body
    language = await users.user_data(call.from_user.id)
    first_trans = await balance.get_first_transaction(call.from_user.id)
    date_first = first_trans[2] if first_trans is not None else None
    hold = await balance.get_hold(call.from_user.id)
    hold = hold[0] if hold is not None else 0
    withdrawal_date = date_first + datetime.timedelta(days=hold) if date_first and hold else None
    text = f"<em>–î–∞—Ç–∞: {current_date.date().strftime('%d.%m.%Y')}</em>"
    text += f"\n<em>–í—ã–≤–æ–¥ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –¥–æ—Å—Ç—É–ø–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!</em>" if is_even_week is False else ""
    text += f"\n\n<b>–¢–µ–ª–æ:</b> {body} USDT" if body else ""
    text += f"\n\n<b>–ù–∞—á–∏—Å–ª–µ–Ω–∏—è:</b> {income} USDT"
    text += f"\n\n<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ö–æ–ª–¥–∞:</b> {withdrawal_date.strftime('%d.%m.%Y %H:%M')} GMT" if withdrawal_date else ""

    if language[4] == 'EN':
        photo = decouple.config("BANNER_WITHDRAWAL_EN")
        text = f"<em>Date: {current_date.date().strftime('%d.%m.%Y')}</em>"
        text += f"\n<em>Output is limited this week!</em>" if is_even_week is False else ""
        text += f"\n\n<b>Body:</b> {body} USDT" if body else ""
        text += f"\n\n<b>Income:</b> {income} USDT"
        text += f"\n\n<b>Withdrawal Date:</b> {withdrawal_date.strftime('%d.%m.%Y %H:%M')} GMT" if withdrawal_date else ""
    await call.message.answer_photo(photo=photo, caption=text, reply_markup=inline.main_withdraw(language[4]))


async def change_wallet_new(call: types.CallbackQuery, state: FSMContext):
    code = commands.generate_random_code()
    email = await users.check_email(call.from_user.id)
    language = await users.user_data(call.from_user.id)
    if email:
        parts = email[0].split('@')
        username = parts[0]
        domain = parts[1]
        masked_username = username[:3] + '*' * (len(username) - 3)
        masked_email = masked_username + '@' + domain
        text = f'üìß –í–∞–º –Ω–∞ –ø–æ—á—Ç—É {masked_email} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã –∫–æ—à–µ–ª—å–∫–∞, ' \
               f'–≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:'
        email_text = f"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞ DAO J2M!\n\n" \
                     f"–î–ª—è —Å–º–µ–Ω—ã –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —ç—Ç–æ—Ç –∫–æ–¥: {code}" \
                     f"\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ " \
                     f"—ç—Ç–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–º –ø–∏—Å—å–º–æ–º, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: " \
                     f"https://t.me/J2M_Support "
        await google.send_email_message(to=email[0],
                                        subject="DAO J2M change wallet",
                                        message_text=email_text)
        if language[4] == "EN":
            text = f"You have been sent a confirmation code to your " \
                   f"email {email[0]}. Please enter it in your reply message:"
    else:
        text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º email –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É'
        if language[4] == "EN":
            text = "An error occurred due to the absence of an email in your profile. Please contact technical support."
    await call.message.delete()
    email_message = await call.message.answer(text)
    await ChangeWallet.email.set()
    async with state.proxy() as data:
        data['code'] = code
        data['email_message'] = email_message.message_id


async def change_wallet_step1(msg: types.Message, state: FSMContext):
    language = await users.user_data(msg.from_user.id)
    async with state.proxy() as data:
        if msg.text == data['code']:
            try:
                await msg.delete()
            except MessageToDeleteNotFound:
                pass
            try:
                await msg.bot.delete_message(msg.chat.id, data.get('email_message'))
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            text = "üëõ –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ TRON TRC-20 –¥–ª—è –≤—ã–≤–æ–¥–∞:"
            if language[4] == 'EN':
                text = "üëõ Please provide a new cryptocurrency wallet TRON TRC-20 address for withdrawal:"
            second_message = await msg.answer(text)
            data['second_message'] = second_message.message_id
            await ChangeWallet.next()
        else:
            try:
                await msg.delete()
            except MessageToDeleteNotFound:
                pass
            try:
                await msg.bot.delete_message(msg.chat.id, data.get('email_message'))
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            text = f'üö´ –í–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–¥ {msg.text} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ ' \
                   f'–µ—â–µ —Ä–∞–∑!'
            if language[4] == 'EN':
                text = f"üö´ The entered code {msg.text} does not match the one that was " \
                       f"sent to your email. Please try again!"
            error_message = await msg.answer(text)
            data['error_message'] = error_message.message_id


async def change_wallet_step2(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        language = await users.user_data(msg.from_user.id)
        await users.save_wallet(msg.text, msg.from_id)
        text = "–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
        if language[4] == 'EN':
            text = "Wallet successfully updated!"
        try:
            await msg.delete()
        except MessageToDeleteNotFound:
            pass
        try:
            await msg.bot.delete_message(msg.chat.id, data.get('second_message'))
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
            pass
        try:
            await msg.bot.delete_message(msg.chat.id, data.get('error_message'))
        except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
            pass
        await msg.answer(text, reply_markup=inline.main_withdraw(language[4]))
        await state.finish()


async def change_percentage(call: types.CallbackQuery):
    language = await users.user_data(call.from_user.id)
    await call.message.delete()
    text = "üìà –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏:\n\n" \
           "<em>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è 100%</em>"
    if language[4] == 'EN':
        text = "Wallet successfully updated!"
    await call.message.answer(text, reply_markup=inline.withdraw_percentage(language[4]))
    await ChangePercentage.percentage.set()


async def change_percentage_step2(call: types.CallbackQuery, state: FSMContext):
    language = await users.user_data(call.from_user.id)
    await balance.update_percentage(call.from_user.id, int(call.data))
    await call.message.delete()
    text = "–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!"
    if language[4] == 'EN':
        text = "Reinvestment percentage successfully updated!"
    await call.message.answer(text, reply_markup=inline.main_withdraw(language[4]))
    await state.finish()


async def withdrawal_handler(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except MessageToDeleteNotFound:
        pass
    language = await users.user_data(call.from_user.id)
    binance_balance = await binance_db.get_binance_ac(call.from_user.id)
    if binance_balance:
        text = f"üîÄ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:"
        if language[4] == "EN":
            text = "üîÄ Select the account type for fund withdrawal:"
        await call.message.answer(text, reply_markup=inline.withdrawal_account(language[4]))
    else:
        await withdrawal_handler_collective(call, state)


async def withdrawal_handler_personal(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except MessageToDeleteNotFound:
        pass
    binance_balance = await binance_db.get_binance_ac(call.from_user.id)
    wallet = await users.user_data(call.from_user.id)
    language = await users.user_data(call.from_user.id)

    if wallet[6]:
        if binance_balance[1] >= 50:
            text = f"<b>–ë–∞–ª–∞–Ω—Å, –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫ –≤—ã–≤–æ–¥—É:</b> {binance_balance[1]} USDT" \
                   f"\nC—É–º–º–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ 50 USDT" \
                   f"\n\nüí≥ –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É USDT, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:"
            if language[4] == "EN":
                text = f"The balance available for withdrawal: {binance_balance[1]} USDT" \
                       f"\nMinimum withdrawal amount is 50 USDT." \
                       f"\n\nüí≥ Please write the amount of USDT you want to withdraw:"
            del_msg = await call.message.answer(text, reply_markup=inline.back_menu(language[4]))
            await state.set_state(NewWallet.amount.state)
            await state.update_data({"del_msg": del_msg.message_id, "status": "–õ–∏—á–Ω—ã–π"})
        else:
            photo = decouple.config("BANNER_WITHDRAWAL")
            text = f"<b>–ë–∞–ª–∞–Ω—Å:</b> {binance_balance[1]} USDT" \
                   f"\n\n<em>‚ùóC—É–º–º–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ 50 USDT </em> "
            if language[4] == "EN":
                photo = decouple.config("BANNER_WITHDRAWAL_EN")
                text = f"<b>Balance:</b> {binance_balance[1]} USDT" \
                       f"\n\n<em>‚ùóMinimum withdrawal amount is 50 USDT</em>"
            await call.message.answer_photo(photo, text, reply_markup=inline.main_withdraw(language[4]))
    else:
        photo = decouple.config("BANNER_WITHDRAWAL")
        text = "‚ùóÔ∏è–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞.</b>" \
               "\n\n<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞! " \
               "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —ç—Ç–æ–º –º–µ–Ω—é.</em>"
        if language[4] == "EN":
            photo = decouple.config("BANNER_WITHDRAWAL_EN")
            text = "‚ùóÔ∏èTo withdraw funds, <b>you need to add a withdrawal wallet.</b>" \
                   "\n\n<em>Click the button below to add a wallet!" \
                   "You can always change the withdrawal wallet in this menu.</em>"
        await call.message.answer_photo(photo, text, reply_markup=inline.main_withdraw(language[4]))


async def withdrawal_handler_collective(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.message.delete()
    except MessageToDeleteNotFound:
        pass
    language = await users.user_data(call.from_user.id)
    first_trans = await balance.get_first_transaction(call.from_user.id)
    date_first = first_trans[2] if first_trans is not None else None
    if first_trans:
        wallet = await users.user_data(call.from_user.id)
        if wallet[6]:
            balance_user, deposit, withdraw, referral_balance = await balance.get_balance(call.from_user.id)
            if balance_user > 0:
                if withdraw == 0:
                    now = datetime.datetime.now()
                    if now.tzinfo is None:
                        now = now.replace(tzinfo=datetime.timezone.utc)
                    hold = await balance.get_hold(call.from_user.id)
                    hold = hold[0] if hold is not None else 0
                    if hold == 0:
                        if first_trans[3] > 1000:
                            pass
                        else:
                            if balance_user > 1000:
                                text = f"<b>–ë–∞–ª–∞–Ω—Å, –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫ –≤—ã–≤–æ–¥—É:</b> {balance_user} USDT" \
                                       f"\nC—É–º–º–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ 50 USDT" \
                                       f"\n\nüí≥ –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É USDT, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:"
                                if language[4] == 'EN':
                                    text = f"The balance available for withdrawal: {balance_user} USDT" \
                                           f"\nMinimum withdrawal amount is 50 USDT." \
                                           f"\n\nüí≥ Please write the amount of USDT you want to withdraw:"
                                del_msg = await call.message.answer(text, reply_markup=inline.back_menu(language[4]))
                                await state.set_state(NewWallet.amount.state)
                                await state.update_data({"del_msg": del_msg.message_id, "status": "–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π"})
                            else:
                                photo = decouple.config("BANNER_WITHDRAWAL")
                                text = f"<b>–ë–∞–ª–∞–Ω—Å:</b> {balance_user} USDT" \
                                       f"\n\n<em>‚ùó–í–∞—à –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1000 USDT, " \
                                       f"—Ç–∞–∫ –∫–∞–∫ –≤–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã–ª–æ –Ω–∞ —Å—É–º–º—É –æ—Ç 500 USDT!" \
                                       f"\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª–æ–≤–∏—è—Ö –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' –∏–ª–∏ " \
                                       f"'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'</em>"
                                if language[4] == "EN":
                                    photo = decouple.config("BANNER_WITHDRAWAL_EN")
                                    text = f"<b>Balance:</b> {balance_user} USDT" \
                                           f"\n\n<em>‚ùóÔ∏èYour balance should be greater than 1000 USDT, " \
                                           f"since your deposit was in the amount of 500 USDT!" \
                                           f"\nFor more information about the conditions, please refer to the " \
                                           f"'Deposit' or 'Information' section.</em>"
                                await call.message.answer_photo(photo, text,
                                                                reply_markup=inline.main_withdraw(language[4]))
                    elif date_first + datetime.timedelta(days=hold if hold else 0) <= now:
                        text = f"<b>–ë–∞–ª–∞–Ω—Å, –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫ –≤—ã–≤–æ–¥—É:</b> {balance_user} USDT" \
                               f"\nC—É–º–º–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ 50 USDT" \
                               f"\n\nüí≥ –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É USDT, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:"
                        if language[4] == 'EN':
                            text = f"The balance available for withdrawal: {balance_user} USDT" \
                                   f"\nMinimum withdrawal amount is 50 USDT." \
                                   f"\n\nüí≥ Please write the amount of USDT you want to withdraw:"
                        del_msg = await call.message.answer(text, reply_markup=inline.back_menu(language[4]))
                        await state.set_state(NewWallet.amount.state)
                        await state.update_data({"del_msg": del_msg.message_id, "status": "–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π"})
                    else:
                        if deposit >= balance_user:
                            text = f"<b>–ë–∞–ª–∞–Ω—Å, –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫ –≤—ã–≤–æ–¥—É:</b> {balance_user} USDT" \
                                   f"\nC—É–º–º–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ 50 USDT" \
                                   f"\n\nüí≥ –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É USDT, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:"
                            if language[4] == 'EN':
                                text = f"The balance available for withdrawal: {balance_user} USDT" \
                                       f"\nMinimum withdrawal amount is 50 USDT." \
                                       f"\n\nüí≥ Please write the amount of USDT you want to withdraw:"
                            del_msg = await call.message.answer(text, reply_markup=inline.back_menu(language[4]))
                            await state.set_state(NewWallet.amount.state)
                            await state.update_data({"del_msg": del_msg.message_id, "status": "–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π"})
                        else:
                            photo = decouple.config("BANNER_WITHDRAWAL")
                            withdrawal_date = date_first + datetime.timedelta(days=hold)
                            text = f"<b>–ë–∞–ª–∞–Ω—Å:</b> {balance_user} USDT\n\n‚ùó<b>–ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> " \
                                   f"{withdrawal_date.strftime('%d-%m-%Y %H:%M:%S')} GMT." \
                                   f"\n\n<em> –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!</em>"
                            if language[4] == "EN":
                                photo = decouple.config("BANNER_WITHDRAWAL_EN")
                                text = f"Ô∏è<b>Balance:</b> {balance_user} USDT\n\n‚ùó<b>Next withdrawal date:</b> " \
                                       f"{withdrawal_date.strftime('%d-%m-%Y %H:%M:%S')} GMT.\n\n<em>You can change " \
                                       f"the reinvestment settings by clicking the button below!</em>"
                            await call.message.answer_photo(photo, text, reply_markup=inline.main_withdraw(language[4]))
                else:
                    photo = decouple.config("BANNER_WITHDRAWAL")
                    text = f"<b>–ë–∞–ª–∞–Ω—Å, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> {withdraw} USDT" \
                           f"\n\n<em>‚ùó–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞, " \
                           f"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤!</em>"
                    if language[4] == "EN":
                        photo = decouple.config("BANNER_WITHDRAWAL_EN")
                        text = f"<b>Reserved balance for withdrawal:</b> {withdraw} USDT" \
                               f"\n\n<em>‚ùóÔ∏èYou have a reserved amount for withdrawal, please wait for the " \
                               f"funds to be credited!</em>"
                    await call.message.answer_photo(photo, text, reply_markup=inline.main_withdraw(language[4]))
            else:
                photo = decouple.config("BANNER_WITHDRAWAL")
                withdrawal_date = date_first + datetime.timedelta(days=14)
                text = f"<b>–ë–∞–ª–∞–Ω—Å:</b> {balance_user} USDT" \
                       f"\n\n<b>–ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> {withdrawal_date.strftime('%d-%m-%Y %H:%M:%S')} GMT" \
                       f"\n\n<em>‚ùóC—É–º–º–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ 50 USDT </em> "
                if language[4] == "EN":
                    photo = decouple.config("BANNER_WITHDRAWAL_EN")
                    text = f"‚ùóÔ∏è<b>Balance:</b> {balance_user} USDT" \
                           f"\n\n‚è∞ <b>Next withdrawal date:</b> {withdrawal_date.strftime('%d-%m-%Y %H:%M:%S')} GMT" \
                           f"\n\n<em>‚ùóMinimum withdrawal amount is 50 USDT</em>"
                await call.message.answer_photo(photo, text, reply_markup=inline.main_withdraw(language[4]))
        else:
            photo = decouple.config("BANNER_WITHDRAWAL")
            text = "‚ùóÔ∏è–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ <b>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞.</b>" \
                   "\n\n<em>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞! " \
                   "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —ç—Ç–æ–º –º–µ–Ω—é.</em>"
            if language[4] == "EN":
                photo = decouple.config("BANNER_WITHDRAWAL_EN")
                text = "‚ùóÔ∏èTo withdraw funds, <b>you need to add a withdrawal wallet.</b>" \
                       "\n\n<em>Click the button below to add a wallet!" \
                       "You can always change the withdrawal wallet in this menu.</em>"
            await call.message.answer_photo(photo, text, reply_markup=inline.main_withdraw(language[4]))
    else:
        photo = decouple.config("BANNER_WITHDRAWAL")
        text = "‚ùóÔ∏è–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ <b>–Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Å.</b>" \
               "\n\n<em>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –ò—Å—Ç–æ—Ä–∏–∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π!</em>"
        if language[4] == "EN":
            photo = decouple.config("BANNER_WITHDRAWAL_EN")
            text = "‚ùóTo activate the withdrawal function, you need to replenish your balance." \
                   "\n\n <em>Currently, you have no Deposit History!</em>"
        await call.message.answer_photo(photo, text, reply_markup=inline.main_withdraw(language[4]))


async def handle_amount(msg: types.Message, state: FSMContext):
    language = await users.user_data(msg.from_user.id)
    try:
        async with state.proxy() as data:
            await msg.delete()
            await msg.bot.delete_message(msg.from_id, data.get('del_msg'))
    except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
        pass
    if not msg.text.isdigit():
        text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!\n\n' \
               'üí≥ –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 50 USDT'
        if language[4] == 'EN':
            text = 'Please, use digits only!'
        await msg.answer(text)
    else:
        personal_balance_user = await binance_db.get_binance_ac(msg.from_user.id)
        collective_balance_user = await balance.get_balance(msg.from_user.id)
        async with state.proxy() as data:
            data['amount'] = msg.text
            if data.get("status") == "–õ–∏—á–Ω—ã–π":
                user_balance = personal_balance_user[1]
            else:
                user_balance = collective_balance_user[0]
            if user_balance >= int(msg.text):
                wallet = await users.user_data(msg.from_user.id)
                text = f"–í—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ –≤—ã–≤–æ–¥ {data.get('amount')} USDT –Ω–∞ TRC-20 –∫–æ—à–µ–ª—ë–∫ {wallet[6]}"
                if language[4] == "EN":
                    text = f"You are requesting a withdrawal of {data.get('amount')} USDT to TRC-20 wallet {wallet[6]}"
                await msg.answer(text, reply_markup=inline.finish_withdrawal(language[4]))
            else:
                text = f'‚ùóÔ∏è<b>–°—É–º–º–∞, –¥–æ—Å—Ç—É–ø–Ω–∞—è –∫ –≤—ã–≤–æ–¥—É:</b> {user_balance} USDT!\n\n' \
                       'üí≥ –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - 50 USDT'
                if language[4] == 'EN':
                    text = f'‚ùóÔ∏è<b>Available withdrawal amount:</b> {user_balance} USDT!\n\n' \
                           'üí≥ Please enter the amount again, the minimum withdrawal amount is 50 USDT.'
                del_msg = await msg.answer(text)
                await state.update_data({"del_msg": del_msg.message_id})


async def finish_withdrawal(call: types.CallbackQuery, state: FSMContext):
    language = await users.user_data(call.from_user.id)
    await call.message.delete()
    await call.bot.send_chat_action(call.message.chat.id, 'typing')
    if call.data == 'back':
        await state.finish()
        photo = decouple.config("BANNER_WITHDRAWAL")
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        if language[4] == 'EN':
            photo = decouple.config("BANNER_WITHDRAWAL_EN")
            text = "Select an option to proceed."
        await call.message.answer_photo(photo=photo, caption=text, reply_markup=inline.main_withdraw(language[4]))
    elif call.data == 'confirm_withdrawal':
        async with state.proxy() as data:
            code = commands.generate_random_code()
            email = await users.check_email(call.from_user.id)
            wallet = await users.user_data(call.from_user.id)
            parts = email[0].split('@')
            username = parts[0]
            domain = parts[1]
            masked_username = username[:3] + '*' * (len(username) - 3)
            masked_email = masked_username + '@' + domain
            if email:
                data['code'] = code
                text = f'üèß –ó–∞—è–≤–∫–∞ –Ω–∞ —Å—É–º–º—É: {data.get("amount")} USDT\n' \
                       f'–ö–æ—à–µ–ª–µ–∫ –≤—ã–≤–æ–¥–∞: {wallet[6]}' \
                       f'\n\nüìß–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ—á—Ç—É {masked_email} –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞:'
                if language[4] == 'EN':
                    text = f'Your withdrawal request for the amount of: {data.get("amount")} USDT has been accepted.' \
                           f'\nExpect a message regarding the results of your application review.'
                email_text = f"–í—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ {data.get('amount')} USDT –Ω–∞ –∫–æ—à–µ–ª–µ–∫ {wallet[6]} !\n\n" \
                             f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —ç—Ç–æ—Ç –∫–æ–¥: {code}" \
                             f"\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ" \
                             f" —ç—Ç–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–º –ø–∏—Å—å–º–æ–º, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: " \
                             f"https://t.me/J2M_Support "
                await google.send_email_message(to=email[0],
                                                subject="DAO J2M withdrawal",
                                                message_text=email_text)
                await NewWallet.next()
            else:
                text = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º email –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É'
                if language[4] == "EN":
                    text = "An error occurred due to the absence of an email in your profile. " \
                           "Please contact technical support."
                await state.finish()
            email_message = await call.message.answer(text)
            data['email_message'] = email_message.message_id
    else:
        text = '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—é!'
        if language[4] == "EN":
            text = 'Operation canceled!'
        lol = await call.message.answer(text)
        await asyncio.sleep(2)
        await call.bot.delete_message(call.from_user.id, lol.message_id)
        await state.finish()
        await handlers.commands.bot_start_call(call)


async def confirm_email_withdrawal(msg: types.Message, state: FSMContext):
    language = await users.user_data(msg.from_user.id)
    async with state.proxy() as data:
        wallet = await users.user_data(msg.from_user.id)
        if msg.text == data.get('code'):
            try:
                await msg.delete()
            except MessageToDeleteNotFound:
                pass
            try:
                await msg.bot.delete_message(msg.chat.id, data.get('email_message'))
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            try:
                await msg.bot.delete_message(msg.chat.id, data.get('error_message'))
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            await output.insert_new_output(msg.from_user.id, data.get('amount'), wallet[6])
            await balance.save_withdrawal_amount(data.get('amount'), msg.from_user.id)
            username = msg.from_user.username
            text = f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å—É–º–º—É: {data.get("amount")} USDT –ø—Ä–∏–Ω—è—Ç–∞ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é!\n\n' \
                   f'<em>–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</em>'
            await msg.bot.send_message(
                decouple.config("GROUP_ID"),
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {"@" + username if username is not None else msg.from_user.id} '
                f'–æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n<b>C—É–º–º–∞:</b> {data.get("amount")}'
                f'\n<b>–ö–æ—à–µ–ª—ë–∫ TRC-20:</b> {wallet[6]}'
                f'\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ —Å—Å—ã–ª–∫–µ: http://89.223.121.160:8000/admin/app/output/'
                f'\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–≤—Ä–µ–º–µ–Ω–Ω–æ, –≤ –ê–ü–ò –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º): 1. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!'
                f'\n2. –°–æ–∑–¥–∞–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–π –≤ –≤—ã–≤–æ–¥ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞" -> '
                f'\n3. –ò–∑–º–µ–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç - –ë–∞–ª–∞–Ω—Å—ã" –∏ '
                f'—É–±–µ—Ä–∏—Ç–µ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å (0,0)')
            await msg.answer(text, reply_markup=inline.main_withdraw(language[4]))
            await state.finish()
        else:
            try:
                await msg.delete()
            except MessageToDeleteNotFound:
                pass
            try:
                await msg.bot.delete_message(msg.chat.id, data.get('email_message'))
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            try:
                await msg.bot.delete_message(msg.chat.id, data.get('error_message'))
            except (MessageToDeleteNotFound, MessageIdentifierNotSpecified):
                pass
            text = f'üö´ –í–≤–µ–¥—ë–Ω–Ω—ã–π –∫–æ–¥ {msg.text} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ ' \
                   f'–µ—â–µ —Ä–∞–∑!'
            if language[4] == 'EN':
                text = f"üö´ The entered code {msg.text} does not match the one that was " \
                       f"sent to your email. Please try again!"
            error_message = await msg.answer(text)
            data['error_message'] = error_message.message_id


def register(dp: Dispatcher):
    dp.register_callback_query_handler(withdraw_main_menu, text='withdrawal')
    dp.register_callback_query_handler(withdrawal_handler, text='withdrawal_funds')
    dp.register_callback_query_handler(withdrawal_handler_collective, text="withdrawal_500")
    dp.register_callback_query_handler(withdrawal_handler_personal, text="withdrawal_15000")
    dp.register_callback_query_handler(change_wallet_new, text='change_wallet')
    dp.register_callback_query_handler(change_percentage, text='change_percentage')
    dp.register_callback_query_handler(change_percentage_step2, state=ChangePercentage.percentage)
    dp.register_message_handler(change_wallet_step1, state=ChangeWallet.email)
    dp.register_message_handler(change_wallet_step2, state=ChangeWallet.wallet)
    dp.register_message_handler(handle_amount, state=NewWallet.amount)
    dp.register_callback_query_handler(finish_withdrawal, state=NewWallet.amount)
    dp.register_message_handler(confirm_email_withdrawal, state=NewWallet.email)
